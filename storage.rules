rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Product images (admin only)
    match /products/{allPaths=**} {
      allow read: if true;  // Anyone can view product images
      allow write: if isAdmin();  // Only admins can upload/modify product images
    }
    
    // User uploaded images (profile, etc)
    match /users/{userId}/{allPaths=**} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(userId) || isAdmin()) &&
        request.resource.size < 5 * 1024 * 1024 &&  // 5MB max
        request.resource.contentType.matches('image/.*');  // Must be an image
    }
    
    // Order images (receipts, proofs, etc)
    match /orders/{orderId}/{allPaths=**} {
      allow read: if isAuthenticated() && (
        resource.metadata.userId == request.auth.uid || isAdmin()
      );
      allow write: if isAuthenticated() && (
        request.resource.metadata.userId == request.auth.uid || isAdmin()
      ) &&
        request.resource.size < 10 * 1024 * 1024 &&  // 10MB max
        request.resource.contentType.matches('image/.*');  // Must be an image
    }
    
    // AI generated images
    match /ai-generated/{userId}/{allPaths=**} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAdmin();  // Only admin/server can write AI generated images
    }
    
    // Catch-all rule - deny everything else
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
